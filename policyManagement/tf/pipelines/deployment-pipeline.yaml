trigger:
  branches:
    include:
      - main
  paths:
    include:
      - policyManagement/tf/**

pool: 'selfhosted'

variables:
  workingDirectory: '$(System.DefaultWorkingDirectory)/policyManagement/tf/'

stages:
- stage: dev_plan
  displayName: 'dev_plan'
  jobs:
  - job: plan
    displayName: 'plan and validate'
    steps:
    - checkout: self

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          Import-Module "$(System.DefaultWorkingDirectory)/policyManagement/scripts/JsoncConverter/JsoncConverter.psd1"
          Convert-JsoncToJson -Path "$(System.DefaultWorkingDirectory)/policyManagement/tf/policies/definitions" -Recurse
        failOnStderr: false
      displayName: 'Convert JSONC to JSON'

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          echo ""
          echo "╔═══════════════════════════════════════════════════════════════════════════════╗"
          echo "║                    AZURE POLICY DEPLOYMENT SUMMARY                            ║"
          echo "╚═══════════════════════════════════════════════════════════════════════════════╝"
          echo ""

          POLICIES_DIR="$(System.DefaultWorkingDirectory)/policyManagement/tf/policies/definitions"

          # Count files
          TOTAL_JSON=$(find "$POLICIES_DIR" -type f -name "*.json" | wc -l | xargs)
          TOTAL_JSONC=$(find "$POLICIES_DIR" -type f -name "*.jsonc" | wc -l | xargs)
          POLICY_JSON=$(find "$POLICIES_DIR" -path "*/policies/*.json" | wc -l | xargs)
          INITIATIVE_JSON=$(find "$POLICIES_DIR" -path "*/initiatives/*.json" | wc -l | xargs)

          # Calculate converted files (JSON files that have corresponding JSONC)
          CONVERTED_FILES=$(find "$POLICIES_DIR" -name "*.jsonc" | wc -l | xargs)

          echo "CONVERSION RESULTS"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "  [OK] JSONC files converted to JSON: $CONVERTED_FILES"
          echo "  Total JSON files available:         $TOTAL_JSON"
          echo "  Source JSONC files:                 $TOTAL_JSONC"
          echo ""

          echo "POLICY INVENTORY"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "  Policy Definitions:       $POLICY_JSON files"
          echo "  Initiative Definitions:   $INITIATIVE_JSON files"
          echo "  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "  Total Governance Assets:  $(($POLICY_JSON + $INITIATIVE_JSON)) definitions"
          echo ""

          # List management groups
          echo "DEPLOYMENT SCOPE (Management Groups)"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          for mgdir in $(find "$POLICIES_DIR/scope" -maxdepth 1 -type d | tail -n +2 | sort); do
            mgname=$(basename "$mgdir")
            policies=$(find "$mgdir/policies" -name "*.json" 2>/dev/null | wc -l | xargs)
            initiatives=$(find "$mgdir/initiatives" -name "*.json" 2>/dev/null | wc -l | xargs)
            echo "  $mgname"
            echo "     └─ Policies: $policies | Initiatives: $initiatives"
          done
          echo ""

          # Policy categories breakdown (if we can parse JSON)
          echo "POLICY CATEGORIES"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          # Count by category (extract from metadata)
          categories=$(find "$POLICIES_DIR" -path "*/policies/*.json" -type f -exec jq -r '.properties.metadata.category // "Uncategorized"' {} \; 2>/dev/null | sort | uniq -c | sort -rn)

          if [ -n "$categories" ]; then
            echo "$categories" | while read count category; do
              printf "  %-30s %3d policies\n" "$category" "$count"
            done
          else
            echo "  Unable to parse categories (jq not available)"
          fi
          echo ""

          echo "VALIDATION STATUS"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          # Validate JSON files
          invalid_count=0
          echo "  Validating JSON files..."
          for jsonfile in $(find "$POLICIES_DIR" -name "*.json" -type f); do
            if ! jq -e . "$jsonfile" >/dev/null 2>&1; then
              echo "  [ERROR] Invalid: $(basename $jsonfile)"
              invalid_count=$((invalid_count + 1))
            fi
          done

          if [ $invalid_count -eq 0 ]; then
            echo "  [OK] All $TOTAL_JSON JSON files are valid"
          else
            echo "  [WARN] Found $invalid_count invalid JSON file(s)"
          fi
          echo ""

          echo "READY FOR DEPLOYMENT"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "  All JSONC files have been converted to JSON format"
          echo "  Terraform will deploy policies to their respective management groups"
          echo "  based on folder structure (convention-based deployment)"
          echo ""
          echo "╚═══════════════════════════════════════════════════════════════════════════════╝"
          echo ""
        workingDirectory: $(System.DefaultWorkingDirectory)
      displayName: 'Azure Policy Deployment Summary'

#     - task: AzureCLI@2
#       inputs:
#         azureSubscription: 'mi-platform-mg-wi-nonprod-001'
#         scriptType: 'bash'
#         scriptLocation: 'inlineScript' # 'scriptPath'
#         # scriptPath: '/pathtoscript'
#         inlineScript: |
#           terraform init
#           terraform validate
#           terraform plan -out=tfplan
#           # terraform plan -out=tfplan -var="environment=dev"
#         # arguments: # string. Alias: scriptArguments. Script Arguments.
#         workingDirectory: $(workingDirectory)
#         failOnStandardError: false # boolean. Fail on Standard Error. Default: false.
#       displayName: 'plan'
#       env:
#         ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)

#     - task: PublishPipelineArtifact@1
#       inputs:
#         targetPath: '$(workingDirectory)/tfplan'
#         artifact: 'terraform-plan'
#         publishLocation: 'pipeline'
#       displayName: 'Publish Terraform Plan' 

# - stage: dev_deploy
#   displayName: 'dev_deploy'
#   dependsOn: dev_plan
#   jobs:
#   - job: apply
#     displayName: 'apply'
#     steps:
#     - checkout: self

#     - task: DownloadPipelineArtifact@2
#       inputs:
#         buildType: 'current'
#         artifactName: 'terraform-plan'
#         targetPath: '$(workingDirectory)'
#       displayName: 'Download Terraform Plan'

#     - task: AzureCLI@2
#       inputs:
#         azureSubscription: 'mi-platform-mg-wi-nonprod-001'
#         scriptType: 'bash'
#         scriptLocation: 'inlineScript' # 'scriptPath'
#         # scriptPath: '/pathtoscript'
#         inlineScript: |
#           terraform init
#           terraform apply -auto-approve tfplan
#         # arguments: # string. Alias: scriptArguments. Script Arguments.
#         workingDirectory: $(workingDirectory)
#         failOnStandardError: false # boolean. Fail on Standard Error. Default: false.
#       displayName: 'apply'
#       env:
#         ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)
